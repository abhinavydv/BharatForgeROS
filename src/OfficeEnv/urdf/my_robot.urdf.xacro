<?xml version="1.0"?>
<robot name="my_robot"  xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Prefix for the robot's links and joints -->
    <xacro:property name="robot_prefix" value="$(arg robot_name)"/>
    
    <xacro:property name="base_length" value="0.6" />
    <xacro:property name="base_width" value="0.4" />
    <xacro:property name="base_height" value="0.2" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_length" value="0.05" />
    
    <material name="blue">
        <color rgba="0 0 0.5 1" />
    </material>

    <material name="grey">
        <color rgba="0.5 0.5 0.5 1" />
    </material>
    
     <xacro:macro name="box_inertia" params="m l w h xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (h*h + l*l)}" ixy="0" ixz="0"
                     iyy="${(m/12) * (w*w + l*l)}" iyz="0"
                     izz="${(m/12) * (w*w + h*h)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0"
                     iyy="${(m/12) * (3*r*r + h*h)}" iyz="0"
                     izz="${(m/2) * (r*r)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${m}" />
            <inertia ixx="${(2/5) * m * r * r}" ixy="0" ixz="0"
                     iyy="${(2/5) * m * r * r}" iyz="0"
                     izz="${(2/5) * m * r * r}" />
        </inertial>
    </xacro:macro>
    
    <link name="${robot_prefix}/base_footprint" />

    <link name="${robot_prefix}/base_link">
        <visual>
            <geometry>
                <box size="0.6 0.4 0.2" />
            </geometry>
            <origin xyz="0 0 0.1" rpy="0 0 0" />
            <material name="blue" />
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
        </collision>
        <xacro:box_inertia m="5.0" l="${2*base_length}" w="${2*base_width}" h="${2*base_height}"
                           xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
    </link>

    <link name="${robot_prefix}/right_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.1" length="0.05" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi/2.0} 0 0" />
            <material name="grey" />
        </visual>
        <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
            </collision>
        <xacro:cylinder_inertia m="1.0" r="${2*wheel_radius}" h="${2*wheel_length}" 
                                    xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>

    <link name="${robot_prefix}/left_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.1" length="0.05" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi/2.0} 0 0" />
            <material name="grey" />
        </visual>
        <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
            </collision>
        <xacro:cylinder_inertia m="1.0" r="${2*wheel_radius}" h="${2*wheel_length}" 
                                    xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>

    <link name="${robot_prefix}/caster_wheel_link">
        <visual>
            <geometry>
                <sphere radius="0.05" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius / 2.0}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <xacro:sphere_inertia m="0.5" r="${2*wheel_radius / 2.0}"
                              xyz="0 0 0" rpy="0 0 0" />
    </link>

    <joint name="${robot_prefix}/base_joint" type="fixed">
        <parent link="${robot_prefix}/base_footprint" />
        <child link="${robot_prefix}/base_link" />
        <origin xyz="0 0 0.1" rpy="0 0 0"/>
    </joint>

    <joint name="${robot_prefix}/base_right_wheel_joint" type="continuous">
        <parent link="${robot_prefix}/base_link" />
        <child link="${robot_prefix}/right_wheel_link" />
        <origin xyz="-0.15 -0.225 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>

    <joint name="${robot_prefix}/base_left_wheel_joint" type="continuous">
        <parent link="${robot_prefix}/base_link" />
        <child link="${robot_prefix}/left_wheel_link" />
        <origin xyz="-0.15 0.225 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>

    <joint name="${robot_prefix}/base_caster_wheel_joint" type="fixed">
        <parent link="${robot_prefix}/base_link" />
        <child link="${robot_prefix}/caster_wheel_link" />
        <origin xyz="0.2 0 -0.05" rpy="0 0 0" />
    </joint>


    <joint name="${robot_prefix}/camera_joint" type="fixed">
        <parent link="${robot_prefix}/base_link"/>
        <child link="${robot_prefix}/camera_link"/>
        <origin xyz="0.31 0 0.1" rpy="0 0 0"/>
    </joint>

    <link name="${robot_prefix}/camera_link">
        <visual>
            <geometry>
                <box size="0.010 0.03 0.03"/>
            </geometry>
            <material name="grey"/>
        </visual>
    </link>

    <joint name="${robot_prefix}/camera_optical_joint" type="fixed">
        <parent link="${robot_prefix}/camera_link"/>
        <child link="${robot_prefix}/camera_link_optical"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <link name="${robot_prefix}/camera_link_optical"></link>

    <gazebo reference="${robot_prefix}/camera_link">
        <material>Gazebo/Red</material>

        <sensor name="camera" type="depth">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <camera>
                <horizontal_fov>1.089</horizontal_fov>
                <image>
                    <format>B8G8R8</format>
                    <width>640</width>
                    <height>480</height>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>8.0</far>
                </clip>
            </camera>
            <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">
                <alwaysOn>true</alwaysOn>
                <frame_name>${robot_prefix}/camera_link_optical</frame_name>
                <min_depth>0.1</min_depth>
                <max_depth>100.0</max_depth>
                <baseline>0.2</baseline>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>depth_camera_ir</cameraName>
                <pointCloudCutoff>0.5</pointCloudCutoff>
                <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
                <distortionK1>0.00000001</distortionK1>
                <distortionK2>0.00000001</distortionK2>
                <distortionK3>0.00000001</distortionK3>
                <distortionT1>0.00000001</distortionT1>
                <distortionT2>0.00000001</distortionT2>
                <CxPrime>0</CxPrime>
                <Cx>0</Cx>
                <Cy>0</Cy>
                <focalLength>0</focalLength>
                <hackBaseline>0</hackBaseline>
            </plugin>
        </sensor>
    </gazebo>
    


    <gazebo reference="${robot_prefix}/base_link">
        <material>Gazebo/Blue</material>
    </gazebo>

    <gazebo reference="${robot_prefix}/right_wheel_link">
        <material>Gazebo/Grey</material>
    </gazebo>

    <gazebo reference="${robot_prefix}/left_wheel_link">
        <material>Gazebo/Grey</material>
    </gazebo>

    <gazebo reference="${robot_prefix}/caster_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1 value="0.1" />
        <mu2 value="0.1" />
    </gazebo>

    <gazebo>
        <plugin name="diff_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <!-- Update rate in Hz -->
            <update_rate>50</update_rate>
            <!-- wheels -->
            <left_joint> ${robot_prefix}/base_left_wheel_joint </left_joint>
            <right_joint> ${robot_prefix}/base_right_wheel_joint </right_joint>
            <!-- kinematics -->
            <wheel_separation>0.45</wheel_separation>
            <wheel_diameter>0.2</wheel_diameter>
            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
            <odometry_topic>${robot_prefix}/odom</odometry_topic>
            <odometry_frame>${robot_prefix}/odom</odometry_frame>
            <robot_base_frame> ${robot_prefix}/base_footprint </robot_base_frame>
        </plugin>
    </gazebo>
</robot>
